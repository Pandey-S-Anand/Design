//Bruteforce approach

class MyHashMap {
    // Maximum possible size of keys (since constraints specify 0 <= key <= 10^6)
    private static final int MAX_SIZE = 1000001;
    
    // Array to store key-value pairs (using direct indexing)
    private int[] hashMap;

    public MyHashMap() {
        hashMap = new int[MAX_SIZE];
        Arrays.fill(hashMap, -1); // Default value -1 indicates that the key does not exist.
    }

    public void put(int key, int value) {
        hashMap[key] = value; //Inserts or updates a key-value pair in the hash map.
    }

    public int get(int key) {
        return hashMap[key] == -1 ? -1 : hashMap[key]; // If the key is not present, returns -1 else the value associated with the given key.
    }

    public void remove(int key) {
        hashMap[key] = -1; // deletion means marking the key as non-existent, we reset it to -1.
    }
}


//Optimal approach

